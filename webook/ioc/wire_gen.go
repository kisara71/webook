// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/gin-gonic/gin"
	"github.com/kisara71/WeBook/webook/internal/repository/auth_binding_repo"
	"github.com/kisara71/WeBook/webook/internal/repository/cache"
	"github.com/kisara71/WeBook/webook/internal/repository/code_repo"
	"github.com/kisara71/WeBook/webook/internal/repository/dao"
	"github.com/kisara71/WeBook/webook/internal/repository/user_repo"
	"github.com/kisara71/WeBook/webook/internal/service/auth_binding_service"
	"github.com/kisara71/WeBook/webook/internal/service/code_service"
	"github.com/kisara71/WeBook/webook/internal/service/user_service"
	"github.com/kisara71/WeBook/webook/internal/web/user"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	v := InitMiddleWare()
	db := InitDatabase()
	daoDao := dao.NewDao(db)
	cmdable := InitRedis()
	userCache := cache.NewUserCache(cmdable)
	userRepository := user_repo.NewUserRepository(daoDao, userCache)
	userService := user_service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := code_repo.NewCodeRepository(codeCache)
	rateLimiter := initRateLimiter(cmdable)
	service := initSMS(rateLimiter)
	codeService := code_service.NewCodeService(codeRepository, service)
	handler := user.NewUserHandler(userService, codeService)
	repository := auth_binding_repo.NewRepository(daoDao)
	auth_binding_serviceService := auth_binding_service.NewService(repository)
	v2 := initOauth2Handlers(auth_binding_serviceService)
	engine := InitGinEngine(v, handler, v2)
	return engine
}
