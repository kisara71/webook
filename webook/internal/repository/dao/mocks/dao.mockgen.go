// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dao/dao.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/dao/dao.go -package=daomock -destination=internal/repository/dao/mocks/dao.mockgen.go
//

// Package daomock is a generated GoMock package.
package daomock

import (
	context "context"
	reflect "reflect"

	domain "github.com/kisara71/WeBook/webook/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
	isgomock struct{}
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Edit mocks base method.
func (m *MockDao) Edit(ctx context.Context, info domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockDaoMockRecorder) Edit(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockDao)(nil).Edit), ctx, info)
}

// FindBinding mocks base method.
func (m *MockDao) FindBinding(ctx context.Context, provider, externalID string) (domain.Oauth2Binding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBinding", ctx, provider, externalID)
	ret0, _ := ret[0].(domain.Oauth2Binding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBinding indicates an expected call of FindBinding.
func (mr *MockDaoMockRecorder) FindBinding(ctx, provider, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBinding", reflect.TypeOf((*MockDao)(nil).FindBinding), ctx, provider, externalID)
}

// FindByEmail mocks base method.
func (m *MockDao) FindByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockDaoMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockDao)(nil).FindByEmail), ctx, email)
}

// FindById mocks base method.
func (m *MockDao) FindById(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDaoMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDao)(nil).FindById), ctx, id)
}

// FindUser mocks base method.
func (m *MockDao) FindUser(ctx context.Context, filed string, value any) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, filed, value)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockDaoMockRecorder) FindUser(ctx, filed, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockDao)(nil).FindUser), ctx, filed, value)
}

// InsertOauth2Binding mocks base method.
func (m *MockDao) InsertOauth2Binding(ctx context.Context, binding domain.Oauth2Binding) (domain.Oauth2Binding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOauth2Binding", ctx, binding)
	ret0, _ := ret[0].(domain.Oauth2Binding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOauth2Binding indicates an expected call of InsertOauth2Binding.
func (mr *MockDaoMockRecorder) InsertOauth2Binding(ctx, binding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOauth2Binding", reflect.TypeOf((*MockDao)(nil).InsertOauth2Binding), ctx, binding)
}

// InsertUser mocks base method.
func (m *MockDao) InsertUser(ctx context.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDaoMockRecorder) InsertUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDao)(nil).InsertUser), ctx, user)
}
